{"version":3,"file":"index.mjs","sources":["../../config.ts","../../CustomQueryClientProvider.tsx","../../AppProviders.tsx"],"sourcesContent":["import { storage } from \"@gaddario98/react-state\";\nimport { createAsyncStoragePersister } from \"@tanstack/query-async-storage-persister\";\nimport {\n  DefaultOptions,\n  OmitKeyof,\n  QueryClient,\n  useMutation,\n  useQueries,\n  useQuery,\n  useQueryClient,\n  QueryKey,\n  UseQueryResult,\n} from \"@tanstack/react-query\";\nimport {\n  Persister,\n  PersistQueryClientOptions,\n} from \"@tanstack/react-query-persist-client\";\nimport { useCallback } from \"react\";\n\nexport let asyncStoragePersister = createAsyncStoragePersister({\n  storage: storage,\n});\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n   //   gcTime: 1000 * 60 * 60 * 24, // 24 hours\n    },\n  },\n});\n\nexport let persistOptions: OmitKeyof<PersistQueryClientOptions, \"queryClient\"> =\n  {\n    persister: asyncStoragePersister,\n    maxAge: 1000 * 60 * 60 * 24,\n    buster: \"persister-v1\",\n  };\n\nexport interface CustomQueryClientConfigProps {\n  options?: DefaultOptions;\n  storagePersister?: Persister;\n  customPersistOptions?: OmitKeyof<PersistQueryClientOptions, \"queryClient\">;\n}\n\nexport const setCustomQueryClientConfig = ({\n  options,\n  storagePersister,\n  customPersistOptions,\n}: CustomQueryClientConfigProps) => {\n  if (options) {\n    queryClient.setDefaultOptions(options);\n  }\n  if (storagePersister) {\n    asyncStoragePersister = storagePersister;\n  }\n  if (customPersistOptions) {\n    persistOptions = customPersistOptions;\n  }\n};\n\nconst useInvalidateQueries = () => {\n  const queryClient = useQueryClient();\n  const invalidateQueries = useCallback(\n    async (queryKeys: Array<QueryKey | undefined>) => {\n      await Promise.all(\n        queryKeys.map(async (queryKey) => {\n          if (queryKey) {\n            await queryClient.invalidateQueries({ queryKey, exact: false });\n          }\n        })\n      );\n    },\n    [queryClient]\n  );\n\n  return { invalidateQueries };\n};\n\nexport {\n  useMutation,\n  useQueries,\n  useQuery,\n  useInvalidateQueries,\n  type UseQueryResult,\n};\n","import { PersistQueryClientProvider } from \"@tanstack/react-query-persist-client\";\nimport { PropsWithChildren } from \"react\";\nimport { persistOptions, queryClient } from \"./config\";\n\nconst CustomQueryClientProvider: React.FC<PropsWithChildren> = ({\n  children,\n}) => {\n  return (\n    <PersistQueryClientProvider\n      client={queryClient}\n      persistOptions={persistOptions}\n    >\n      {children}\n    </PersistQueryClientProvider>\n  );\n};\n\nexport default CustomQueryClientProvider;\n","import CustomQueryClientProvider from \"./CustomQueryClientProvider\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { PropsWithChildren } from \"react\";\nimport { Provider, createStore } from \"jotai\";\nconst store = createStore();\n\nexport const AppProviders: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n      <Provider store={store}>\n        <HelmetProvider>\n          <CustomQueryClientProvider>{children}</CustomQueryClientProvider>\n        </HelmetProvider>\n      </Provider>\n  );\n};\n"],"names":["asyncStoragePersister","createAsyncStoragePersister","storage","queryClient","QueryClient","defaultOptions","queries","persistOptions","persister","maxAge","buster","setCustomQueryClientConfig","options","storagePersister","customPersistOptions","setDefaultOptions","useInvalidateQueries","$","_c","useQueryClient","t0","queryKeys","Promise","all","map","queryKey","invalidateQueries","exact","t1","CustomQueryClientProvider","children","_jsx","PersistQueryClientProvider","client","store","createStore","AppProviders","Provider","HelmetProvider"],"mappings":";;;;;;;;;;;AAmBO,IAAIA,qBAAqB,GAAGC,2BAA2B,CAAC;AAC7DC,EAAAA,OAAO,EAAEA;AACV,CAAA;AAEM,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC;AACzCC,EAAAA,cAAc,EAAE;AACdC,IAAAA,OAAO,EAAE;AACV;AAAA;AAEA;AACF,CAAA;AAEM,IAAIC,cAAc,GACvB;AACEC,EAAAA,SAAS,EAAER,qBAAqB;AAChCS,EAAAA,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AAC3BC,EAAAA,MAAM,EAAE;;AASL,MAAMC,0BAA0B,GAAGA,CAAC;EACzCC,OAAO;EACPC,gBAAgB;AAChBC,EAAAA;AAAoB,CACS,KAAI;AACjC,EAAA,IAAIF,OAAO,EAAE;AACXT,IAAAA,WAAW,CAACY,iBAAiB,CAACH,OAAO,CAAC;AACxC,EAAA;AACA,EAAA,IAAIC,gBAAgB,EAAE;AACpBb,IAAAA,qBAAqB,GAAGa,gBAAgB;AAC1C,EAAA;AACA,EAAA,IAAIC,oBAAoB,EAAE;AACxBP,IAAAA,cAAc,GAAGO,oBAAoB;AACvC,EAAA;AACF;AAEA,MAAME,oBAAoB,GAAGA,MAAA;EAAA,MAAAC,CAAA,GAAAC,CAAA,CAAA,CAAA,CAAA;AAC3B,EAAA,MAAAf,WAAA,GAAoBgB,cAAc,EAAE;AAAC,EAAA,IAAAC,EAAA;EAAA,IAAAH,CAAA,QAAAd,WAAA,EAAA;AAEnCiB,IAAAA,EAAA,SAAAC,SAAA,IAAA;MACE,MAAMC,OAAO,CAAAC,GAAI,CACfF,SAAS,CAAAG,GAAI,CAAC,MAAAC,QAAA,IAAA;AACZ,QAAA,IAAIA,QAAQ,EAAA;UACV,MAAMtB,WAAW,CAAAuB,iBAAkB,CAAC;YAAAD,QAAA;AAAAE,YAAAA,KAAA,EAAmB;AAAK,WAAE,CAAC;AAAA,QAAA;AAChE,MAAA,CACF,CAAC,CACH;IAAA,CACF;AAAAV,IAAAA,CAAA,MAAAd,WAAA;AAAAc,IAAAA,CAAA,MAAAG,EAAA;AAAA,EAAA,CAAA,MAAA;AAAAA,IAAAA,EAAA,GAAAH,CAAA,CAAA,CAAA,CAAA;AAAA,EAAA;EATH,MAAAS,iBAAA,GAA0BN,EAWzB;AAAC,EAAA,IAAAQ,EAAA;EAAA,IAAAX,CAAA,QAAAS,iBAAA,EAAA;IAEKE,EAAA,GAAA;AAAAF,MAAAA;KAAqB;AAAAT,IAAAA,CAAA,MAAAS,iBAAA;AAAAT,IAAAA,CAAA,MAAAW,EAAA;AAAA,EAAA,CAAA,MAAA;AAAAA,IAAAA,EAAA,GAAAX,CAAA,CAAA,CAAA,CAAA;AAAA,EAAA;AAAA,EAAA,OAArBW,EAAqB;AAAA;;ACvE9B,MAAMC,yBAAyB,GAAgCA,CAAC;AAC9DC,EAAAA;AAAQ,CACT,KAAI;EACH,OACEC,GAAA,CAACC,0BAA0B,EAAA;AACzBC,IAAAA,MAAM,EAAE9B,WAAW;AACnBI,IAAAA,cAAc,EAAEA,cAAc;AAAAuB,IAAAA,QAAA,EAE7BA;AAAQ,GAAA,CACkB;AAEjC,CAAC;;ACXD,MAAMI,KAAK,GAAGC,WAAW,EAAE;AAEpB,MAAMC,YAAY,GAAgCA,CAAC;AAAEN,EAAAA;AAAQ,CAAE,KAAI;EACxE,OACIC,GAAA,CAACM,QAAQ;AAACH,IAAAA,KAAK,EAAEA,KAAK;AAAAJ,IAAAA,QAAA,EACpBC,GAAA,CAACO,cAAc,EAAA;AAAAR,MAAAA,QAAA,EACbC,GAAA,CAACF,yBAAyB,EAAA;AAAAC,QAAAA,QAAA,EAAEA;;KAAqC;AAClD,GAAA,CACR;AAEjB;;;;"}